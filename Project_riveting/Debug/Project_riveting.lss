
Project_riveting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000002b6  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d8f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002ee  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001bd  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001fa  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b8  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001a0  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000276  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	73 c0       	rjmp	.+230    	; 0xfa <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	88 c0       	rjmp	.+272    	; 0x128 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	92 c0       	rjmp	.+292    	; 0x140 <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	2d d0       	rcall	.+90     	; 0x9e <main>
  44:	ec c0       	rjmp	.+472    	; 0x21e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <switch_read>:

char switch_read(int Switch_Pin_number)
{
	unsigned char cs=0,ls=1;
	unsigned char Read_Conform=0;
	cs = PINC & (1<<Switch_Pin_number);
  48:	93 b3       	in	r25, 0x13	; 19
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	08 2e       	mov	r0, r24
  50:	01 c0       	rjmp	.+2      	; 0x54 <switch_read+0xc>
  52:	22 0f       	add	r18, r18
  54:	0a 94       	dec	r0
  56:	ea f7       	brpl	.-6      	; 0x52 <switch_read+0xa>
  58:	92 23       	and	r25, r18
	if (cs==0 && ls!=0)
  5a:	89 f4       	brne	.+34     	; 0x7e <switch_read+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	ef e3       	ldi	r30, 0x3F	; 63
  5e:	fc e9       	ldi	r31, 0x9C	; 156
  60:	31 97       	sbiw	r30, 0x01	; 1
  62:	f1 f7       	brne	.-4      	; 0x60 <switch_read+0x18>
  64:	00 c0       	rjmp	.+0      	; 0x66 <switch_read+0x1e>
  66:	00 00       	nop
	{
		_delay_ms(20);
		if (!(PINC & (1<<Switch_Pin_number)))
  68:	23 b3       	in	r18, 0x13	; 19
  6a:	30 e0       	ldi	r19, 0x00	; 0
  6c:	02 c0       	rjmp	.+4      	; 0x72 <switch_read+0x2a>
  6e:	35 95       	asr	r19
  70:	27 95       	ror	r18
  72:	8a 95       	dec	r24
  74:	e2 f7       	brpl	.-8      	; 0x6e <switch_read+0x26>
  76:	20 fd       	sbrc	r18, 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <switch_read+0x36>
		{
			Read_Conform=1;
			return Read_Conform;
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	08 95       	ret
		}
	}
	ls=cs;
}
  7e:	08 95       	ret

00000080 <uart_init>:

void uart_init(void)
{
	UCSRB|=(1<<RXEN)|(1<<TXEN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	88 61       	ori	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  86:	80 b5       	in	r24, 0x20	; 32
  88:	86 68       	ori	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
	UBRRH=(BAUD_PRESCALE >>8);
  8c:	84 e3       	ldi	r24, 0x34	; 52
  8e:	80 bd       	out	0x20, r24	; 32
	UBRRL=BAUD_PRESCALE;
  90:	8f e0       	ldi	r24, 0x0F	; 15
  92:	89 b9       	out	0x09, r24	; 9
	UCSRB|=((1<<RXCIE)|(1<<TXCIE));
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	80 6c       	ori	r24, 0xC0	; 192
  98:	8a b9       	out	0x0a, r24	; 10
	sei();
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <main>:
}

int main(void)
{
	DDRD=0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	DDRC=0x00;
  a2:	14 ba       	out	0x14, r1	; 20
	TIMSK|=(1<<TOIE0);
  a4:	89 b7       	in	r24, 0x39	; 57
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	89 bf       	out	0x39, r24	; 57
	sei();
  aa:	78 94       	sei
	TCCR0|=(1<<CS02) | (1<<CS00);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	85 60       	ori	r24, 0x05	; 5
  b0:	83 bf       	out	0x33, r24	; 51
	char switch_counter=0;
	unsigned int timer_start=0,timer_stop=0,difference=0;
    uart_init();
  b2:	e6 df       	rcall	.-52     	; 0x80 <uart_init>
	DDRC=0x00;
	TIMSK|=(1<<TOIE0);
	sei();
	TCCR0|=(1<<CS02) | (1<<CS00);
	char switch_counter=0;
	unsigned int timer_start=0,timer_stop=0,difference=0;
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
	DDRD=0xFF;
	DDRC=0x00;
	TIMSK|=(1<<TOIE0);
	sei();
	TCCR0|=(1<<CS02) | (1<<CS00);
	char switch_counter=0;
  bc:	f1 2c       	mov	r15, r1
				switch_counter=0;
				timer_stop=flag32ms;
			}
		}
		 difference= timer_stop-timer_start;
		 UDR='d';
  be:	84 e6       	ldi	r24, 0x64	; 100
  c0:	e8 2e       	mov	r14, r24
	char switch_counter=0;
	unsigned int timer_start=0,timer_stop=0,difference=0;
    uart_init();
	while(1)
    {
		if(switch_read(0))
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	c0 df       	rcall	.-128    	; 0x48 <switch_read>
  c8:	88 23       	and	r24, r24
  ca:	69 f0       	breq	.+26     	; 0xe6 <main+0x48>
		{
			TCNT0=0;
  cc:	12 be       	out	0x32, r1	; 50
			timer_start=flag32ms;
  ce:	c0 91 62 00 	lds	r28, 0x0062
  d2:	d0 91 63 00 	lds	r29, 0x0063
			switch_counter++;
  d6:	f3 94       	inc	r15
			if (switch_counter%2==0)
  d8:	f0 fc       	sbrc	r15, 0
  da:	05 c0       	rjmp	.+10     	; 0xe6 <main+0x48>
			{
				switch_counter=0;
				timer_stop=flag32ms;
  dc:	00 91 62 00 	lds	r16, 0x0062
  e0:	10 91 63 00 	lds	r17, 0x0063
			TCNT0=0;
			timer_start=flag32ms;
			switch_counter++;
			if (switch_counter%2==0)
			{
				switch_counter=0;
  e4:	f1 2c       	mov	r15, r1
				timer_stop=flag32ms;
			}
		}
		 difference= timer_stop-timer_start;
		 UDR='d';
  e6:	ec b8       	out	0x0c, r14	; 12
		 itoa(difference,array,10);
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	60 e6       	ldi	r22, 0x60	; 96
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	c8 01       	movw	r24, r16
  f2:	8c 1b       	sub	r24, r28
  f4:	9d 0b       	sbc	r25, r29
  f6:	50 d0       	rcall	.+160    	; 0x198 <itoa>
		// UartSend=difference
		
        //TODO:: Please write your application code 
    }
  f8:	e4 cf       	rjmp	.-56     	; 0xc2 <main+0x24>

000000fa <__vector_9>:
}
ISR (TIMER0_OVF_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
	flag32ms++;
 108:	80 91 62 00 	lds	r24, 0x0062
 10c:	90 91 63 00 	lds	r25, 0x0063
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 63 00 	sts	0x0063, r25
 116:	80 93 62 00 	sts	0x0062, r24
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_11>:
ISR (USART_RXC_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
	cli();
 132:	f8 94       	cli
	sei();
 134:	78 94       	sei
}
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_13>:
ISR (USART_TXC_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
		UDR=array[i++];
 154:	80 91 60 00 	lds	r24, 0x0060
 158:	90 91 61 00 	lds	r25, 0x0061
 15c:	fc 01       	movw	r30, r24
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	20 81       	ld	r18, Z
 164:	2c b9       	out	0x0c, r18	; 12
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 61 00 	sts	0x0061, r25
 16c:	80 93 60 00 	sts	0x0060, r24
		if (i>3)
 170:	80 91 60 00 	lds	r24, 0x0060
 174:	90 91 61 00 	lds	r25, 0x0061
 178:	04 97       	sbiw	r24, 0x04	; 4
 17a:	24 f0       	brlt	.+8      	; 0x184 <__vector_13+0x44>
		{
			i=0;
 17c:	10 92 61 00 	sts	0x0061, r1
 180:	10 92 60 00 	sts	0x0060, r1
		}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <itoa>:
 198:	fb 01       	movw	r30, r22
 19a:	9f 01       	movw	r18, r30
 19c:	e8 94       	clt
 19e:	42 30       	cpi	r20, 0x02	; 2
 1a0:	bc f0       	brlt	.+46     	; 0x1d0 <itoa+0x38>
 1a2:	45 32       	cpi	r20, 0x25	; 37
 1a4:	ac f4       	brge	.+42     	; 0x1d0 <itoa+0x38>
 1a6:	4a 30       	cpi	r20, 0x0A	; 10
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <itoa+0x1c>
 1aa:	97 fb       	bst	r25, 7
 1ac:	1e f4       	brtc	.+6      	; 0x1b4 <itoa+0x1c>
 1ae:	90 95       	com	r25
 1b0:	81 95       	neg	r24
 1b2:	9f 4f       	sbci	r25, 0xFF	; 255
 1b4:	64 2f       	mov	r22, r20
 1b6:	77 27       	eor	r23, r23
 1b8:	1e d0       	rcall	.+60     	; 0x1f6 <__udivmodhi4>
 1ba:	80 5d       	subi	r24, 0xD0	; 208
 1bc:	8a 33       	cpi	r24, 0x3A	; 58
 1be:	0c f0       	brlt	.+2      	; 0x1c2 <itoa+0x2a>
 1c0:	89 5d       	subi	r24, 0xD9	; 217
 1c2:	81 93       	st	Z+, r24
 1c4:	cb 01       	movw	r24, r22
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	a9 f7       	brne	.-22     	; 0x1b4 <itoa+0x1c>
 1ca:	16 f4       	brtc	.+4      	; 0x1d0 <itoa+0x38>
 1cc:	5d e2       	ldi	r21, 0x2D	; 45
 1ce:	51 93       	st	Z+, r21
 1d0:	10 82       	st	Z, r1
 1d2:	c9 01       	movw	r24, r18
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <strrev>

000001d6 <strrev>:
 1d6:	dc 01       	movw	r26, r24
 1d8:	fc 01       	movw	r30, r24
 1da:	67 2f       	mov	r22, r23
 1dc:	71 91       	ld	r23, Z+
 1de:	77 23       	and	r23, r23
 1e0:	e1 f7       	brne	.-8      	; 0x1da <strrev+0x4>
 1e2:	32 97       	sbiw	r30, 0x02	; 2
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <strrev+0x18>
 1e6:	7c 91       	ld	r23, X
 1e8:	6d 93       	st	X+, r22
 1ea:	70 83       	st	Z, r23
 1ec:	62 91       	ld	r22, -Z
 1ee:	ae 17       	cp	r26, r30
 1f0:	bf 07       	cpc	r27, r31
 1f2:	c8 f3       	brcs	.-14     	; 0x1e6 <strrev+0x10>
 1f4:	08 95       	ret

000001f6 <__udivmodhi4>:
 1f6:	aa 1b       	sub	r26, r26
 1f8:	bb 1b       	sub	r27, r27
 1fa:	51 e1       	ldi	r21, 0x11	; 17
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__udivmodhi4_ep>

000001fe <__udivmodhi4_loop>:
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	a6 17       	cp	r26, r22
 204:	b7 07       	cpc	r27, r23
 206:	10 f0       	brcs	.+4      	; 0x20c <__udivmodhi4_ep>
 208:	a6 1b       	sub	r26, r22
 20a:	b7 0b       	sbc	r27, r23

0000020c <__udivmodhi4_ep>:
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	5a 95       	dec	r21
 212:	a9 f7       	brne	.-22     	; 0x1fe <__udivmodhi4_loop>
 214:	80 95       	com	r24
 216:	90 95       	com	r25
 218:	bc 01       	movw	r22, r24
 21a:	cd 01       	movw	r24, r26
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
